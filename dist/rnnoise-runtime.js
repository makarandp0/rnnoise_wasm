'use strict';const base$jscomp$3=document.currentScript.src.match(/(.*\/)?/)[0],compilation=(WebAssembly.compileStreaming||(async c=>await WebAssembly.compile(await (await c).arrayBuffer())))(fetch(base$jscomp$3+"rnnoise-processor.wasm"));let module,instance,heapFloat32;
window.RNNoiseNode=(window.AudioWorkletNode||(window.AudioWorkletNode=window.webkitAudioWorkletNode))&&class extends AudioWorkletNode{static async register(c){module=await compilation;await c.audioWorklet.addModule(base$jscomp$3+"rnnoise-processor.js")}constructor(c){super(c,"rnnoise",{channelCountMode:"explicit",channelCount:1,channelInterpretation:"speakers",numberOfInputs:1,numberOfOutputs:1,outputChannelCount:[1],processorOptions:{module}});this.port.onmessage=({data:a})=>{a=Object.assign(new Event("status"),
a);this.dispatchEvent(a);if(this.onstatus)this.onstatus(a)}}update(c){this.port.postMessage(c)}}||(window.ScriptProcessorNode||(window.ScriptProcessorNode=window.webkitScriptProcessorNode))&&Object.assign(function(c){const a=c.createScriptProcessor(512,1,1),d=instance.newState();let f=!0;a.onaudioprocess=({inputBuffer:b,outputBuffer:e})=>{f&&(heapFloat32.set(b.getChannelData(0),instance.getInput(d)/4),b=e.getChannelData(0),(e=instance.pipe(d,b.length)/4)&&b.set(heapFloat32.subarray(e,e+b.length)))};
a.update=b=>{if(f)if(b){if(b=Object.assign(new Event("status"),{vadProb:instance.getVadProb(d)}),a.dispatchEvent(b),a.onstatus)a.onstatus(b)}else f=!1,instance.deleteState(d)};return a},{register:async()=>{instance||(heapFloat32=new Float32Array((instance=(await WebAssembly.instantiate(await compilation)).exports).memory.buffer))}});
